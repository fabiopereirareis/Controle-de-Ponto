criar classe model com os atributos
    criar gets e sets ou usar lambok
    criar método construtores ou usar lambok
    colocar annotation @Entity para criar tabela no banco de dados
        colocar o nome no campo value
    informar o id da entidade(tabela)
        colocar annotation @GenerateValue para geração do id
====================================================================
criar a interface repository estendendo classe JpaRepository passar o tipo e o tipo do id
ex: JpaRepository<ClasseModel, Integer>
    colocar a annotation @Repository para o spring reconhecer como repository
====================================================================
criar classe service
    colocar annotation @Service para o spring reconhecer a classe com serviço
    instânciar um objeto repository para criar os métodos de acesso ao banco de dados
        colocar a annotation @Autowired para o spring instânciar o objeto em tempo de execução
    criar um método construtor pegando como parâmetro um objeto repository
    criar os métodos a escolha pode criar um CRUD por exemplo
====================================================================
criar a classe controller
    colocar a annotation @RestController para o spring reconhecer
    colocar a annotation @RequestMapping com o end-point da aplicação
        ex: @RequestMapping("/minhaAPI")
    instânciar um objeto service para usar os métodos
        aplicar a annotation @Autowired
    criar os métodos que seram usados na API por exemplo CRUD
        usar annotation @ApiOperation para título do método(usado na documentação)
            ex: @ApiOperation(value = "título do método")
        usar annotation @ResponseStatus para gerar status HTTP (boas prática)
            ex: @responseStatus(HttpStatus.CREATED)
        usar annotation @RequestBody para pegar o corpo da requisição
        usar annotation @PathVariable para pegar valor no endereço da requisição
            ex: localhos/minhaAPI/23 onde 23 seria o valor passado e pego pela annotation
        usar annotation @RequestParam para pegar parâmetro na requisição
        usar annotation @PostMapping para salvar
        usar annotation @GetMapping para buscar
        usar annotation @PutMapping para atualizar
        usar annotation @DeleteMapping para deletar

        pegar o objeto pelo id
        verificar campo 1 ( se campo 1 =! null){
        obeto encontado set campo1 = objeto recebido get campo1

        }
================ swagger =====================
implemenar os códigos no arquivo build.gradle
// https://mvnrepository.com/artifact/io.springfox/springfox-swagger2
	implementation group: 'io.springfox', name: 'springfox-swagger2', version: '3.0.0'

	// https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui
	implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: '3.0.0'

	// https://mvnrepository.com/artifact/io.springfox/springfox-boot-starter
	implementation group: 'io.springfox', name: 'springfox-boot-starter', version: '3.0.0'

-------------------------------------------------

criar uma classe de configuração
colocar as anotações :
@Configuration
@EnableSwagger2

colocar a anotação @Bean no método
    @Bean
    public Docket swagger(){
        return new Docket(DocumentationType.SWAGGER_2)
                .select()
                .apis(RequestHandlerSelectors.basePackage("br.com.dio.controledeponto"))
                .apis(RequestHandlerSelectors.any())
                .paths(PathSelectors.regex("/*.*"))
                .build()
                .apiInfo(metaInfo());
    }

    private ApiInfo metaInfo(){
        ApiInfo apiInfo =  new ApiInfo(
        "Controle de Ponto",
        "Projeto API REST para controle de ponto",
        "0.0.1",
        "Terms of Service",
        new Contact("Fábio Pereira Reis","" ,"fabiopereirar@hotmail.com"),
        "Apache License Version 2.0",
        "https://www.apache.org/license.html", new ArrayList<VendorExtension>());
        return apiInfo;
    }

---------------------------------------------------------------------------------
colocar a anotação na classe Controller
@ApiOperation(value = "Texto que aparecerá no swagger")

---------------------------------------------------------------------------------
endereço: http://localhost:8080/swagger-ui/index.html